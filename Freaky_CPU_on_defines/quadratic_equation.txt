jmp main

init:
pop rcx
pop rbx
pop rax
ret

a0:
cmp rbx 0
je a0b0
cmp rbx 0
jne a0bn0
ret

a0b0:
cmp rcx 0
je inf
cmp rcx 0
jne nosol
ret

inf:
push 1
push 0
div
out
ret

ans0:
push 0
out
ret

a0bn0:
push -1
push rcx
mul
push rbx
div
out
ret

nosol:
meow
ret

discr:
push rbx
push rbx
mul
push 4
push rax
push rcx
mul
mul
sub
ret

an0b0:
cmp rcx 0
je an0b0c0
cmp rcx 0
jne an0b0cn0
ret

an0b0c0:
call inf
ret

an0b0cn0:
push rcx
push -1
mul
push rax
div
sqrt
out

push rcx
push -1
mul
push rax
div
sqrt
push -1
mul
out

ret

oneans:
push -1
push rbx
mul
push 2
push rax
mul
div
out
ret

twoans:
push rdx
sqrt
pop rdx

push -1
push rbx
mul
push rdx
sub
push 2
div
push rax
div
out

push -1
push rbx
mul
push rdx
add
push 2
div
push rax
div
out

ret

an0:
cmp rdx 0
je oneans
cmp rdx 0
jb nosol
cmp rdx 0
ja twoans
ret

main:
in
in
in

call init

call discr
pop rdx

cmp rax 0
je a0
cmp rax 0
jne an0
hlt
